{"mappings":"A,I,E,C,CEOA,OAAM,EACJ,OAAO,WAAa,CAClB,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,CAAE,AAEF,aACE,EAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,CACA,IAAI,CAAC,MAAM,CAAG,EAAK,UAAU,CAAC,IAAI,CAClC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,KAAK,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CACjD,CAEA,UAAW,CACT,GAAI,IAAI,CAAC,SAAS,KAAO,EAAK,UAAU,CAAC,OAAO,CAC9C,OAGF,IAAI,EAAW,CAAA,EAEf,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAK,CAC1C,IAAI,EAAc,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAElD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,MAAM,CAAG,EAAG,IACtC,CAAW,CAAC,EAAE,GAAK,CAAW,CAAC,EAAI,EAAE,GACvC,CAAW,CAAC,EAAE,EAAI,EAClB,CAAW,CAAC,EAAI,EAAE,CAAG,EACrB,IAAI,CAAC,KAAK,EAAI,CAAW,CAAC,EAAE,CAC5B,EAAW,CAAA,GAMf,IAFA,EAAc,EAAY,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAErC,EAAY,MAAM,CAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAC9C,EAAY,IAAI,CAAC,GAGf,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,KAAO,EAAY,QAAQ,KACnD,EAAW,CAAA,EACX,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,EAEpB,CAEI,IACF,IAAI,CAAC,OAAO,GACZ,IAAI,CAAC,WAAW,GAEpB,CAEA,WAAY,CACV,GAAI,IAAI,CAAC,SAAS,KAAO,EAAK,UAAU,CAAC,OAAO,CAC9C,OAGF,IAAI,EAAW,CAAA,EAEf,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAK,CAC1C,IAAI,EAAc,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAElD,IAAK,IAAI,EAAI,EAAY,MAAM,CAAG,EAAG,EAAI,EAAG,IACtC,CAAW,CAAC,EAAE,GAAK,CAAW,CAAC,EAAI,EAAE,GACvC,CAAW,CAAC,EAAE,EAAI,EAClB,CAAW,CAAC,EAAI,EAAE,CAAG,EACrB,IAAI,CAAC,KAAK,EAAI,CAAW,CAAC,EAAE,CAC5B,EAAW,CAAA,GAMf,IAFA,EAAc,EAAY,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAErC,EAAY,MAAM,CAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAC9C,EAAY,OAAO,CAAC,GAGlB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,KAAO,EAAY,QAAQ,KACnD,EAAW,CAAA,EACX,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,EAEpB,CAEI,IACF,IAAI,CAAC,OAAO,GACZ,IAAI,CAAC,WAAW,GAEpB,CAEA,QAAS,CACP,GAAI,IAAI,CAAC,SAAS,KAAO,EAAK,UAAU,CAAC,OAAO,CAC9C,OAGF,IAAI,EAAW,CAAA,EAEf,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAO,CAChD,IAAI,EAAS,EAAE,CAEf,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACZ,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAIpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAW,CAAA,GAMf,IAFA,EAAS,EAAO,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAE3B,EAAO,MAAM,CAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EACtC,EAAO,IAAI,CAAC,GAGd,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,GACtC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,CAClC,EAAW,CAAA,EAGjB,CAEI,IACF,IAAI,CAAC,OAAO,GACZ,IAAI,CAAC,WAAW,GAEpB,CAEA,UAAW,CACT,GAAI,IAAI,CAAC,SAAS,KAAO,EAAK,UAAU,CAAC,OAAO,CAC9C,OAGF,IAAI,EAAW,CAAA,EAEf,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAO,CAChD,IAAI,EAAS,EAAE,CAEf,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACZ,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAIpC,IAAK,IAAI,EAAI,EAAO,MAAM,CAAG,EAAG,EAAI,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAW,CAAA,GAMf,IAFA,EAAS,EAAO,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAE3B,EAAO,MAAM,CAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EACtC,EAAO,OAAO,CAAC,GAGjB,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,GACtC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,CAClC,EAAW,CAAA,EAGjB,CAEI,IACF,IAAI,CAAC,OAAO,GACZ,IAAI,CAAC,WAAW,GAEpB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,EAAK,UAAU,CAAC,OAAO,CACrC,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACpD,IAAI,CAAC,OAAO,GACZ,IAAI,CAAC,OAAO,EACd,CAEA,SAAU,CACR,IAAI,CAAC,MAAM,CAAG,EAAK,UAAU,CAAC,IAAI,CAClC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,UAAU,EACjB,CAEA,gBAAiB,CACf,OAAO,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnC,CAEA,gBAAgB,CAAG,CAAE,CACnB,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EACpC,CAEA,aAAc,CACZ,IAAI,EAAiB,CAAA,EACjB,EAAW,CAAA,EAET,EAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAE9B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,GAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAO,CAChC,IAAI,CAAC,MAAM,CAAG,EAAK,UAAU,CAAC,GAAG,CAEjC,MACF,CAGF,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IAAK,CAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IACO,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,CAAA,EAAiB,CAAA,CADnB,EAII,EAAI,EAAO,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,EAC3D,CAAA,EAAW,CAAA,CADb,EAII,EAAI,EAAO,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,EAC3D,CAAA,EAAW,CAAA,CADb,EAII,CAAA,IAAkB,GAbE,KAkB1B,GAAI,GAAkB,EACpB,KAEJ,CAEK,GAAmB,GACtB,CAAA,IAAI,CAAC,MAAM,CAAG,EAAK,UAAU,CAAC,IAAI,AAAJ,CAElC,CAEA,YAAa,CACX,IAAI,CAAC,KAAK,CAAG,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAAE,AAC5D,CAEA,SAAU,CACR,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACf,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAE,SAAU,EAAG,UAAW,CAAE,GAKlD,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAGF,IAAM,EAAc,IAAI,CAAC,eAAe,CAAC,EAAW,MAAM,EACpD,CAAA,SAAE,CAAQ,CAAA,UAAE,CAAS,CAAE,CAAG,CAAU,CAAC,EAAY,CACjD,EAAW,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CAEjD,CAAA,CAAQ,CAAC,EAAS,CAAC,EAAU,CAAG,IAAI,CAAC,cAAc,GACnD,IAAI,CAAC,KAAK,CAAG,CACf,CACF,CDpSA,MAAM,EAAO,GCsSb,CAAA,EAAiB,CAAjB,EDpSM,EAAc,SAAS,aAAa,CAAC,UACrC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAY,SAAS,aAAa,CAAC,eAgEzC,SAAS,IACP,EAAU,SAAS,CAAG,EAAK,QAAQ,EACrC,CAEA,SAAS,IACP,IAAM,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAc,EAAK,KAAK,CAAC,IAAI,GAEnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,MAAM,CAAE,IAAK,CAC3C,IAAM,EAAc,CAAK,CAAC,EAAE,CACtB,EAAe,CAAW,CAAC,EAAE,AAEnC,CAAA,EAAY,SAAS,CAAG,CAAC,aAAa,CAElC,EAAe,GACjB,EAAY,WAAW,CAAG,EAC1B,EAAY,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAa,CAAC,GAEvD,EAAY,WAAW,CAAG,EAE9B,CACF,CAnFA,EAAY,gBAAgB,CAAC,QAAS,KAChC,EAAY,SAAS,CAAC,QAAQ,CAAC,UACjC,EAAK,KAAK,GACV,IAEA,EAAY,SAAS,CAAG,iBACxB,EAAY,SAAS,CAAG,UACxB,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UAEzB,KACS,EAAY,SAAS,CAAC,QAAQ,CAAC,aACxC,EAAK,OAAO,GACZ,IAEA,EAAY,SAAS,CAAG,eACxB,EAAY,SAAS,CAAG,QACxB,EAAa,SAAS,CAAC,MAAM,CAAC,UAC9B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UAEzB,IAEJ,GAEA,SAAS,gBAAgB,CAAC,QAAS,AAAC,IAClC,OAAQ,EAAE,GAAG,EACX,IAAK,UACL,IAAK,IACH,EAAK,MAAM,GACX,IACA,KACF,KAAK,YACL,IAAK,IACH,EAAK,QAAQ,GACb,IACA,KACF,KAAK,YACL,IAAK,IACH,EAAK,QAAQ,GACb,IACA,KACF,KAAK,aACL,IAAK,IACH,EAAK,SAAS,GACd,GAEJ,CAEA,IAKI,EAAK,SAAS,KAAO,EAAK,UAAU,CAAC,IAAI,CAC3C,EAAY,SAAS,CAAC,MAAM,CAAC,UACpB,EAAK,SAAS,KAAO,EAAK,UAAU,CAAC,GAAG,EACjD,EAAW,SAAS,CAAC,MAAM,CAAC,SANhC","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static gameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.score = 0;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    moveLeft() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let hasMoved = false;\n        for(let i = 0; i < this.state.length; i++){\n            let filteredRow = this.state[i].filter((value)=>value !== 0);\n            for(let j = 0; j < filteredRow.length - 1; j++)if (filteredRow[j] === filteredRow[j + 1]) {\n                filteredRow[j] *= 2;\n                filteredRow[j + 1] = 0;\n                this.score += filteredRow[j];\n                hasMoved = true;\n            }\n            filteredRow = filteredRow.filter((value)=>value !== 0);\n            while(filteredRow.length < this.state[i].length)filteredRow.push(0);\n            if (this.state[i].toString() !== filteredRow.toString()) {\n                hasMoved = true;\n                this.state[i] = filteredRow;\n            }\n        }\n        if (hasMoved) {\n            this.addCell();\n            this.checkStatus();\n        }\n    }\n    moveRight() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let hasMoved = false;\n        for(let i = 0; i < this.state.length; i++){\n            let filteredRow = this.state[i].filter((value)=>value !== 0);\n            for(let j = filteredRow.length - 1; j > 0; j--)if (filteredRow[j] === filteredRow[j - 1]) {\n                filteredRow[j] *= 2;\n                filteredRow[j - 1] = 0;\n                this.score += filteredRow[j];\n                hasMoved = true;\n            }\n            filteredRow = filteredRow.filter((value)=>value !== 0);\n            while(filteredRow.length < this.state[i].length)filteredRow.unshift(0);\n            if (this.state[i].toString() !== filteredRow.toString()) {\n                hasMoved = true;\n                this.state[i] = filteredRow;\n            }\n        }\n        if (hasMoved) {\n            this.addCell();\n            this.checkStatus();\n        }\n    }\n    moveUp() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let hasMoved = false;\n        for(let col = 0; col < this.state.length; col++){\n            let column = [];\n            for(let row = 0; row < this.state.length; row++)if (this.state[row][col] !== 0) column.push(this.state[row][col]);\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                column[i + 1] = 0;\n                this.score += column[i];\n                hasMoved = true;\n            }\n            column = column.filter((value)=>value !== 0);\n            while(column.length < this.state.length)column.push(0);\n            for(let row = 0; row < this.state.length; row++)if (this.state[row][col] !== column[row]) {\n                this.state[row][col] = column[row];\n                hasMoved = true;\n            }\n        }\n        if (hasMoved) {\n            this.addCell();\n            this.checkStatus();\n        }\n    }\n    moveDown() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let hasMoved = false;\n        for(let col = 0; col < this.state.length; col++){\n            let column = [];\n            for(let row = 0; row < this.state.length; row++)if (this.state[row][col] !== 0) column.push(this.state[row][col]);\n            for(let i = column.length - 1; i > 0; i--)if (column[i] === column[i - 1]) {\n                column[i] *= 2;\n                column[i - 1] = 0;\n                this.score += column[i];\n                hasMoved = true;\n            }\n            column = column.filter((value)=>value !== 0);\n            while(column.length < this.state.length)column.unshift(0);\n            for(let row = 0; row < this.state.length; row++)if (this.state[row][col] !== column[row]) {\n                this.state[row][col] = column[row];\n                hasMoved = true;\n            }\n        }\n        if (hasMoved) {\n            this.addCell();\n            this.checkStatus();\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.playing;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.addCell();\n        this.addCell();\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.score = 0;\n        this.resetState();\n    }\n    getRandomValue() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    getRandomNumber(max) {\n        return Math.floor(Math.random() * max);\n    }\n    checkStatus() {\n        let movesAvailable = false;\n        let canMerge = false;\n        const size = this.state.length;\n        for(let i = 0; i < size; i++)if (this.state[i].includes(2048)) {\n            this.status = $a5fd07fa01589658$var$Game.gameStatus.win;\n            return;\n        }\n        for(let i = 0; i < size; i++){\n            for(let j = 0; j < size; j++){\n                if (this.state[i][j] === 0) movesAvailable = true;\n                if (j < size - 1 && this.state[i][j] === this.state[i][j + 1]) canMerge = true;\n                if (i < size - 1 && this.state[i][j] === this.state[i + 1][j]) canMerge = true;\n                if (movesAvailable || canMerge) break;\n            }\n            if (movesAvailable || canMerge) break;\n        }\n        if (!movesAvailable && !canMerge) this.status = $a5fd07fa01589658$var$Game.gameStatus.lose;\n    }\n    resetState() {\n        this.state = [\n            ...this.initialState.map((row)=>[\n                    ...row\n                ])\n        ];\n    }\n    addCell() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                rowIndex: i,\n                cellIndex: j\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const randomIndex = this.getRandomNumber(emptyCells.length);\n        const { rowIndex: rowIndex, cellIndex: cellIndex } = emptyCells[randomIndex];\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        newState[rowIndex][cellIndex] = this.getRandomValue();\n        this.state = newState;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$setState();\n        $09e991522ca7e64e$var$startButton.classList = \"button restart\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$getScore();\n    } else if ($09e991522ca7e64e$var$startButton.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$setState();\n        $09e991522ca7e64e$var$startButton.classList = \"button start\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Start\";\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$getScore();\n    }\n});\ndocument.addEventListener(\"keyup\", (e)=>{\n    switch(e.key){\n        case \"ArrowUp\":\n        case \"w\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$setState();\n            break;\n        case \"ArrowDown\":\n        case \"s\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$setState();\n            break;\n        case \"ArrowLeft\":\n        case \"a\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$setState();\n            break;\n        case \"ArrowRight\":\n        case \"d\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$setState();\n            break;\n    }\n    $09e991522ca7e64e$var$getScore();\n    $09e991522ca7e64e$var$updateMessages();\n});\nfunction $09e991522ca7e64e$var$updateMessages() {\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$getScore() {\n    $09e991522ca7e64e$var$gameScore.innerHTML = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$setState() {\n    const cells = document.querySelectorAll(\".field-cell\");\n    const stateValues = $09e991522ca7e64e$var$game.state.flat();\n    for(let i = 0; i < stateValues.length; i++){\n        const currentCell = cells[i];\n        const currentValue = stateValues[i];\n        currentCell.classList = [\n            \"field-cell\"\n        ];\n        if (currentValue > 0) {\n            currentCell.textContent = currentValue;\n            currentCell.classList.add(`field-cell--${currentValue}`);\n        } else currentCell.textContent = \"\";\n    }\n}\n\n\n//# sourceMappingURL=index.6fe95054.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    setState();\n\n    startButton.classList = 'button restart';\n    startButton.innerHTML = 'Restart';\n    startMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    getScore();\n  } else if (startButton.classList.contains('restart')) {\n    game.restart();\n    setState();\n\n    startButton.classList = 'button start';\n    startButton.innerHTML = 'Start';\n    startMessage.classList.remove('hidden');\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    getScore();\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  switch (e.key) {\n    case 'ArrowUp':\n    case 'w':\n      game.moveUp();\n      setState();\n      break;\n    case 'ArrowDown':\n    case 's':\n      game.moveDown();\n      setState();\n      break;\n    case 'ArrowLeft':\n    case 'a':\n      game.moveLeft();\n      setState();\n      break;\n    case 'ArrowRight':\n    case 'd':\n      game.moveRight();\n      setState();\n      break;\n  }\n\n  getScore();\n  updateMessages();\n});\n\nfunction updateMessages() {\n  if (game.getStatus() === Game.gameStatus.lose) {\n    loseMessage.classList.remove('hidden');\n  } else if (game.getStatus() === Game.gameStatus.win) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction getScore() {\n  gameScore.innerHTML = game.getScore();\n}\n\nfunction setState() {\n  const cells = document.querySelectorAll('.field-cell');\n  const stateValues = game.state.flat();\n\n  for (let i = 0; i < stateValues.length; i++) {\n    const currentCell = cells[i];\n    const currentValue = stateValues[i];\n\n    currentCell.classList = ['field-cell'];\n\n    if (currentValue > 0) {\n      currentCell.textContent = currentValue;\n      currentCell.classList.add(`field-cell--${currentValue}`);\n    } else {\n      currentCell.textContent = '';\n    }\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static gameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = Game.gameStatus.idle;\n    this.score = 0;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let i = 0; i < this.state.length; i++) {\n      let filteredRow = this.state[i].filter((value) => value !== 0);\n\n      for (let j = 0; j < filteredRow.length - 1; j++) {\n        if (filteredRow[j] === filteredRow[j + 1]) {\n          filteredRow[j] *= 2;\n          filteredRow[j + 1] = 0;\n          this.score += filteredRow[j];\n          hasMoved = true;\n        }\n      }\n\n      filteredRow = filteredRow.filter((value) => value !== 0);\n\n      while (filteredRow.length < this.state[i].length) {\n        filteredRow.push(0);\n      }\n\n      if (this.state[i].toString() !== filteredRow.toString()) {\n        hasMoved = true;\n        this.state[i] = filteredRow;\n      }\n    }\n\n    if (hasMoved) {\n      this.addCell();\n      this.checkStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let i = 0; i < this.state.length; i++) {\n      let filteredRow = this.state[i].filter((value) => value !== 0);\n\n      for (let j = filteredRow.length - 1; j > 0; j--) {\n        if (filteredRow[j] === filteredRow[j - 1]) {\n          filteredRow[j] *= 2;\n          filteredRow[j - 1] = 0;\n          this.score += filteredRow[j];\n          hasMoved = true;\n        }\n      }\n\n      filteredRow = filteredRow.filter((value) => value !== 0);\n\n      while (filteredRow.length < this.state[i].length) {\n        filteredRow.unshift(0);\n      }\n\n      if (this.state[i].toString() !== filteredRow.toString()) {\n        hasMoved = true;\n        this.state[i] = filteredRow;\n      }\n    }\n\n    if (hasMoved) {\n      this.addCell();\n      this.checkStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let col = 0; col < this.state.length; col++) {\n      let column = [];\n\n      for (let row = 0; row < this.state.length; row++) {\n        if (this.state[row][col] !== 0) {\n          column.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          column[i + 1] = 0;\n          this.score += column[i];\n          hasMoved = true;\n        }\n      }\n\n      column = column.filter((value) => value !== 0);\n\n      while (column.length < this.state.length) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < this.state.length; row++) {\n        if (this.state[row][col] !== column[row]) {\n          this.state[row][col] = column[row];\n          hasMoved = true;\n        }\n      }\n    }\n\n    if (hasMoved) {\n      this.addCell();\n      this.checkStatus();\n    }\n  }\n\n  moveDown() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let col = 0; col < this.state.length; col++) {\n      let column = [];\n\n      for (let row = 0; row < this.state.length; row++) {\n        if (this.state[row][col] !== 0) {\n          column.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = column.length - 1; i > 0; i--) {\n        if (column[i] === column[i - 1]) {\n          column[i] *= 2;\n          column[i - 1] = 0;\n          this.score += column[i];\n          hasMoved = true;\n        }\n      }\n\n      column = column.filter((value) => value !== 0);\n\n      while (column.length < this.state.length) {\n        column.unshift(0);\n      }\n\n      for (let row = 0; row < this.state.length; row++) {\n        if (this.state[row][col] !== column[row]) {\n          this.state[row][col] = column[row];\n          hasMoved = true;\n        }\n      }\n    }\n\n    if (hasMoved) {\n      this.addCell();\n      this.checkStatus();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.gameStatus.playing;\n    this.state = this.initialState.map((row) => [...row]);\n    this.addCell();\n    this.addCell();\n  }\n\n  restart() {\n    this.status = Game.gameStatus.idle;\n    this.score = 0;\n    this.resetState();\n  }\n\n  getRandomValue() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getRandomNumber(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  checkStatus() {\n    let movesAvailable = false;\n    let canMerge = false;\n\n    const size = this.state.length;\n\n    for (let i = 0; i < size; i++) {\n      if (this.state[i].includes(2048)) {\n        this.status = Game.gameStatus.win;\n\n        return;\n      }\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (this.state[i][j] === 0) {\n          movesAvailable = true;\n        }\n\n        if (j < size - 1 && this.state[i][j] === this.state[i][j + 1]) {\n          canMerge = true;\n        }\n\n        if (i < size - 1 && this.state[i][j] === this.state[i + 1][j]) {\n          canMerge = true;\n        }\n\n        if (movesAvailable || canMerge) {\n          break;\n        }\n      }\n\n      if (movesAvailable || canMerge) {\n        break;\n      }\n    }\n\n    if (!movesAvailable && !canMerge) {\n      this.status = Game.gameStatus.lose;\n    }\n  }\n\n  resetState() {\n    this.state = [...this.initialState.map((row) => [...row])];\n  }\n\n  addCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push({ rowIndex: i, cellIndex: j });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = this.getRandomNumber(emptyCells.length);\n    const { rowIndex, cellIndex } = emptyCells[randomIndex];\n    const newState = this.state.map((row) => [...row]);\n\n    newState[rowIndex][cellIndex] = this.getRandomValue();\n    this.state = newState;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","gameStatus","idle","playing","win","lose","constructor","initialState","status","score","state","map","row","moveLeft","getStatus","hasMoved","i","length","filteredRow","filter","value","j","push","toString","addCell","checkStatus","moveRight","unshift","moveUp","col","column","moveDown","getScore","getState","start","restart","resetState","getRandomValue","Math","random","getRandomNumber","max","floor","movesAvailable","canMerge","size","includes","emptyCells","rowIndex","cellIndex","randomIndex","newState","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$getScore","innerHTML","$09e991522ca7e64e$var$setState","cells","querySelectorAll","stateValues","flat","currentCell","currentValue","classList","textContent","add","addEventListener","contains","remove","e","key"],"version":3,"file":"index.6fe95054.js.map"}